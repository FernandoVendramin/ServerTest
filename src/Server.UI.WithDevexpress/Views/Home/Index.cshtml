@using Server_UI_WithDevexpress.Models
@using Server.UI.WithDevexpress
@using Server.UI.WithDevexpress.Extensions
@using ServerTest.Utils
@model ServerTest.Models.Client

<script type="text/javascript">
    //https://supportcenter.devexpress.com/ticket/details/t590924/how-to-submit-datagrid-model-with-form-values

    function CreateInputPhoneElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");
        $input.appendTo(container).attr({ type: "hidden", name: "Phones[" + itemIndex + "]." + itemName }).val(itemValue);
    }

    function CreateInputAddressElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");
        $input.appendTo(container).attr({ type: "hidden", name: "Addresses[" + itemIndex + "]." + itemName }).val(itemValue);
    }

    function customSubmitForm(e) {
        if (e.validationGroup.validate().isValid) {
            $.when(
                $("#gridAddresses").dxDataGrid("instance").getDataSource().load().done(function (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        for (var property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateInputAddressElement(property, item[property], i, $("#manageClient")[0]);
                            }
                        }
                    }
                }),

                $("#gridPhones").dxDataGrid("instance").getDataSource().load().done(function (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        for (var property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateInputPhoneElement(property, item[property], i, $("#manageClient")[0]);
                            }
                        }
                    }
                })).
                done(function (loadPhone, loadAddress) {
                    $("#manageClient").submit();
                });
        }
    }
</script>

<div class="long-title"><h3>Client Register</h3></div>
<div id="form-container">
    @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { id = "manageClient" }))
    {

        @(Html.DevExtreme().Form<ServerTest.Models.Client>()
            .ID("form")
            .LabelLocation(FormLabelLocation.Top)
            .Items(items =>
            {
                items.AddGroup()
                    .Caption("Personal Data")
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.ClientType).Editor(e => e
                            .SelectBox()
                            .DataSource(d => d.Mvc().Controller("Home").LoadAction("GetClientType").Key("Id"))
                            .SearchEnabled(true)
                            .DisplayExpr("Name"));

                        groupItems.AddSimpleFor(m => m.SocialReason);

                        groupItems.AddSimpleFor(m => m.FantasyName);

                        groupItems.AddSimpleFor(m => m.BirthDataTime);
                    });

                items.AddGroup()
                    .Caption("Documents")
                    .Items(innerGroupItems =>
                    {
                        innerGroupItems.AddSimpleFor(m => m.CPF);
                        innerGroupItems.AddSimpleFor(m => m.RG);
                    });

                items.AddGroup()
                    .ColSpan(2)
                    .Caption("Extra Information")
                    .Items(groupItems =>
                    {
                        groupItems.AddTabbed()
                            .TabPanelOptions(o =>
                            {
                                o.DeferRendering(false);
                            })
                            .Tabs(tabItems =>
                            {
                                tabItems.Add()
                                    .Title("Addresses")
                                    .Items(tabItem =>
                                    {
                                        tabItem.AddSimple()
                                            .Template(new TemplateName("templateGridAddress"));
                                    });

                                tabItems.Add()
                                    .Title("Phones")
                                    .Items(tabItem =>
                                    {
                                        tabItem.AddSimple()
                                            .Template(new TemplateName("templateGridPhones"));
                                    });
                            });
                    });

                items.AddGroup()
                    .ColSpan(2)
                    .Items(item => item
                        .AddButton()
                        .ButtonOptions(opt => opt
                            .UseSubmitBehavior(false)
                            .OnClick("customSubmitForm")
                            .Text("Submit")));
            })
            .FormData(Model));

        @using (Html.DevExtreme().NamedTemplate("templateGridAddress"))
        {
            @(Html.DevExtreme().DataGrid<ServerTest.Models.ClientAddress>()
                .ID("gridAddresses")
                .ShowBorders(true)
                .DataSource(Model.Addresses, new[] {nameof(ServerTest.Models.ClientAddress.Id)})
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Id);
                    columns.AddFor(m => m.Address);
                    columns.AddFor(m => m.Number);
                    columns.AddFor(m => m.District);
                    columns.AddFor(m => m.City);
                    columns.AddFor(m => m.State);
                    columns.AddFor(m => m.PostalCode);
                })
                .Paging(p => p.PageSize(10))
                .FilterRow(f => f.Visible(true))
                .GroupPanel(p => p.Visible(true))
                .OnRowInsertingWithChangeTracking()
                .OnRowUpdatingWithChangeTracking()
                .OnRowRemovingWithChangeTracking()
                .Grouping(g => g.AutoExpandAll(false))
                .Editing(config =>
                    config
                        .AllowAdding(true)
                        .AllowUpdating(new JS("function(e) { return (e.row.data.StateChange != " + (int)StateChange.Deleted + "); }"))
                        .AllowDeleting(new JS("function(e) { return (e.row.data.StateChange != " + (int)StateChange.Deleted + "); }"))
                        .ConfirmDelete(true)
                        .UseIcons(true)
                        .Mode(GridEditMode.Popup)
                        .Popup(p => p
                            .Title("Address Info")
                            .ShowTitle(true)
                            .Width(700)
                            .Height(525)
                            .Position(pos => pos
                                .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                                .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                                .Of(new JS("window"))
                            )
                        )
                        .Form(f => f.Items(items =>
                        {
                            items.AddGroup()
                                .Caption("Principal")
                                .ColCount(2)
                                .ColSpan(2)
                                .Items(groupItems =>
                                {
                                    groupItems.AddSimpleFor(m => m.Address);
                                    groupItems.AddSimpleFor(m => m.Number);
                                    groupItems.AddSimpleFor(m => m.District);
                                });

                            items.AddGroup()
                                .Caption("Complement")
                                .ColCount(2)
                                .ColSpan(2)
                                .Items(groupItems =>
                                {
                                    groupItems.AddSimpleFor(m => m.City);
                                    groupItems.AddSimpleFor(m => m.State);
                                    groupItems.AddSimpleFor(m => m.PostalCode);
                                });
                        })))
            )
        }

        @using (Html.DevExtreme().NamedTemplate("templateGridPhones"))
        {
            @(Html.DevExtreme().DataGrid<ServerTest.Models.ClientPhone>()
                .ID("gridPhones")
                .ShowBorders(true)
                .DataSource(Model.Phones, new[] {nameof(ServerTest.Models.ClientPhone.Id)})
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Id);
                    columns.AddFor(m => m.PhoneNumber);
                })
                .OnRowInsertingWithChangeTracking()
                .OnRowUpdatingWithChangeTracking()
                .OnRowRemovingWithChangeTracking()
                .Paging(p => p.PageSize(10))
                .FilterRow(f => f.Visible(true))
                .GroupPanel(p => p.Visible(true))
                .Grouping(g => g.AutoExpandAll(false))
                .Editing(config =>
                    config
                        .AllowAdding(true)
                        .AllowUpdating(new JS("function(e) { return (e.row.data.StateChange != " + (int)StateChange.Deleted + "); }"))
                        .AllowDeleting(new JS("function(e) { return (e.row.data.StateChange != " + (int)StateChange.Deleted + "); }"))
                        .ConfirmDelete(true)
                        .UseIcons(true)
                        .Mode(GridEditMode.Popup)
                        .Popup(p => p
                            .Title("Phone Info")
                            .ShowTitle(true)
                            .Width(700)
                            .Height(525)
                            .Position(pos => pos
                                .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                                .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                                .Of(new JS("window"))
                            )
                        )
                        .Form(f => f.Items(items =>
                        {
                            items.AddGroup()
                                .Caption("Principal")
                                .Items(groupItems =>
                                {
                                    groupItems.AddSimpleFor(m => m.Id);
                                    groupItems.AddSimpleFor(m => m.PhoneNumber);
                                });
                        }))
                )
            )
        }
    }
    <br/>
</div>